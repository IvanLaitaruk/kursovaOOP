#pragma once
#include "Train.h"

#define COLUMN_COUNT 7 //кількість колонок, в які будуть виводитись дані одного потяга
#define COLUMN_COUNT_AV 2 //кількітсь колонок, в які будуть виводитись дані при сортування за середньою швидкістю одного потяга

namespace worksheet
{
	class AllTrains
	{

	private:

		vector<Train> trains;

		//--------------------------------------------------------------------------------------------------------------
		//сортування методом злиття; етап розбиття
		//сортування за місцем початкової станції
		void MergeSort(int begin, int end);
		//--------------------------------------------------------------------------------------------------------------
		//сортування метод злиття; етап злиття
		//сортування за місцем початкової станції
		void merging(int begin, int mid, int end);
		//--------------------------------------------------------------------------------------------------------------
		//сортування швидким методом
		//сортування за середньою швидкістю потягів
		void QuickSort(int begin, int end);
		int partition(int begin, int end);
		void swap(int i, int j);
		//--------------------------------------------------------------------------------------------------------------
		//сортування методом Шела
		//сортування за початковою станцією
		//використовується для групування потягів за початковою станцією
		void ShellSortArrival();
		//сортування за проміжною станцією
		//використовується для групування потягів за проміжною станцією
		void ShellSortWay(int wayStation);

	public:
		//--------------------------------------------------------------------------------------------------------------
		AllTrains();
		//--------------------------------------------------------------------------------------------------------------
		//сортування потягів за початковою станцією
		void sortByDepartureStation();
		//--------------------------------------------------------------------------------------------------------------
		//повертає вектор потягів, які курсують через задану станцію
		vector<Train> findStation(Station station);
		//--------------------------------------------------------------------------------------------------------------
		//повертає вектор потягів, які відправляються із заданої станції у заданий період часу
		vector<Train> findByDepartureAndTime(Station departure, tm timeStart, tm timeEnd);
		//--------------------------------------------------------------------------------------------------------------
		//повертає вектор потягів, які прибувають до заданої станції у заданий період часу
		vector<Train> findByArrivalAndTime(Station arrival, tm timeStart, tm timeEnd);
		//--------------------------------------------------------------------------------------------------------------
		//заповнення масиву потягів з файлу
		//формат стрічки для зчитування: 
		//"| id | Виїзд | Прибуття | Проміжні станції | Час виїзду | Час прибуття | Дистанція"
		void operator<<(string filename);
		//запис даних у файл
		//формат запису стрічки кожного потяга: 
		//"| id | Виїзд | Прибуття | Проміжні станції | Час виїзду | Час прибуття | Дистанція"
		void operator>>(string filename);
		//--------------------------------------------------------------------------------------------------------------
		//виведення списку потягів у таблицю
		void printInTable(DataGridView^ dgv);
		//--------------------------------------------------------------------------------------------------------------
		//виведення списку id потягів та їхніх середніх швидкостей у таблицю
		void printInTableAverageSpeed(DataGridView^ dgv);
		//--------------------------------------------------------------------------------------------------------------
		//геттер класу
		//повертає вектор усіх потягів списку
		vector<Train>& getTrains() { return this->trains; }
		//--------------------------------------------------------------------------------------------------------------
		//сортування за середньою швидкістю потягів
		void sortByAverageSpeed();
		//--------------------------------------------------------------------------------------------------------------
		//згрупувати потяги за початковою станцію і вивести у таблицю
		void groupByArrival(DataGridView^ dgv);
		//--------------------------------------------------------------------------------------------------------------
		//згрупувати потяги за проміжною станцію і вивести у таблицю
		void groupByWay(DataGridView^ dgv, int wayStation);
	};
	//--------------------------------------------------------------------------------------------------------------

}

